node {
   def commit_id
   stage('Preparation') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"                        
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('test') {
     nodejs(nodeJSInstallationName: 'nodejs') {
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }
 /* stage('SonarQube analysis') {
        script {
            scannerHome = tool 'sonarqube';
        }
        withSonarQubeEnv('sonarqube') {
            sh """
            sonar-scanner \
  -Dsonar.projectKey=jenkins \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://192.168.100.18:9000 \
  -Dsonar.login=fc10e93d7010fb7107635563ec693c0a96eb38eb
        """
        }
    } */
   stage('sonar-scanner') {
      def sonarqubeScannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
      withCredentials([string(credentialsId: 'sonarqube', variable: 'sonarLogin')]) {
        sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://192.168.100.18:9000 -Dsonar.login=fc10e93d7010fb7107635563ec693c0a96eb38eb -Dsonar.projectName=jenkins -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=jenkins -Dsonar.language=java -Dsonar.java.binaries=."
      }
    }
   stage('docker build/push') {
     docker.withRegistry('https://index.docker.io/v2/', 'dockerhub') {
       def app = docker.build("ce318002/jenkins-docker:${commit_id}", '.').push()
     }
   }
}
